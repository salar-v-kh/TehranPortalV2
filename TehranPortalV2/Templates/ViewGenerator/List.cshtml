@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore
@using System.Collections.Generic
@using System.Linq
@@model @GetEnumerableTypeExpression(Model.ViewDataTypeName)

@{
    if (Model.IsPartialView)
    {
    }
    else if (Model.IsLayoutPageSelected)
    {
@:@@{
    @:ViewBag.Title = "لیــــست نام";
    @:ViewBag.TitlePage = "لیــــست نام";
        if (!string.IsNullOrEmpty(Model.LayoutPageFile))
        {
    @:Layout = "@Model.LayoutPageFile";
        }
@:}
    }
    else
    {
@:@@{
    @:Layout = null;
@:}
@:
@:<!DOCTYPE html>
@:
@:<html>
@:<head>
    @:<meta name="viewport" content="width=device-width" />
    @:<title>@Model.ViewName</title>
@:</head>
@:<body>
        //    PushIndent("    ");
    }
@:<div class="row tehranit-box">
@:  <!--item-->
@:  <div class="col-12">
@:      <div class="content-box">
@:        <div class="title-box">
@:            <span>لیــــست نام</span>
@:            <i class="bi bi-list-task"></i>
@:        </div>
@:        <a class="MyBtn-icon MyBtn-base mb-2" asp-action="Create"><span>افزودن فیلد جدید</span><i class="bi bi-plus-lg"></i></a>
@:        <div class="table-responsive tehranit-table">
@:            <table class="table align-middle table-bordered table-hover">
@:                 <thead>
@:                      <tr>
                            Dictionary<string, IPropertyMetadata> propertyLookup = ((IModelMetadata)Model.ModelMetadata).Properties.ToDictionary(x => x.PropertyName, x => x);
                            Dictionary<string, INavigationMetadata> navigationLookup = ((IModelMetadata)Model.ModelMetadata).Navigations.ToDictionary(x => x.AssociationPropertyName, x => x);
 
                            foreach (var item in Model.ModelMetadata.ModelType.GetProperties())
                            {
                                if (propertyLookup.TryGetValue(item.Name, out IPropertyMetadata property)
                                    && property.Scaffold && !property.IsForeignKey && !property.IsPrimaryKey)
                                {
                                <th scope="col">
                                    @@Html.DisplayNameFor(model => model.@GetValueExpression(property))
                                </th>
                                }
                                else if (navigationLookup.TryGetValue(item.Name, out INavigationMetadata navigation))
                                {
                                <th scope="col">
                                    @@Html.DisplayNameFor(model => model.@GetValueExpression(navigation))
                                </th>
                                }
                            }
@:                          <th></th>
@:                      </tr>
@:                 </thead>
@:                 <tbody>
@:                      @@foreach (var item in Model) {
@:                          <tr>
                                foreach (var item in Model.ModelMetadata.ModelType.GetProperties())
        {
            if (propertyLookup.TryGetValue(item.Name, out IPropertyMetadata property)
                && property.Scaffold && !property.IsForeignKey && !property.IsPrimaryKey)
            {
            <td>
                @@Html.DisplayFor(modelItem => item.@GetValueExpression(property))
            </td>
            }
            else if (navigationLookup.TryGetValue(item.Name, out INavigationMetadata navigation))
            {
            <td>
                @@Html.DisplayFor(modelItem => item.@GetValueExpression(navigation).@navigation.DisplayPropertyName)
            </td>
            }
        }
                                string pkName = GetPrimaryKeyName();
                                if (pkName != null)
                            {
@:                              <td>
@:                                  <a class="ati ati-edit" asp-action="Edit" asp-route-id="@@item.Id"><i class="bi bi-pencil-fill"></i></a>
@:                                  <a class="ati ati-view" asp-action="Details" asp-route-id="@@item.Id"><i class="bi bi-eye-fill"></i></a>
@:                                  <a class="ati ati-remove" asp-action="Delete" asp-route-id="@@item.Id"><i class="bi bi-trash3-fill"></i></a>
@:                              </td>
                            }
                                else
                                {
@:                              <td>
@:                                  <a class="ati ati-edit" asp-action="Edit" asp-route-id="@@item.Id"><i class="bi bi-pencil-fill"></i></a>
@:                                  <a class="ati ati-view" asp-action="Details" asp-route-id="@@item.Id"><i class="bi bi-eye-fill"></i></a>
@:                                  <a class="ati ati-remove" asp-action="Delete" asp-route-id="@@item.Id"><i class="bi bi-trash3-fill"></i></a>
@:                              </td>
                                }
@:                          </tr>
@:                        }
@:                 </tbody>
@:              </table>
@:        </div>
@:      </div>
@:  </div>
@:</div>
@:
@:@@section Styles{}
@:@@section Scripts{}
@:
    if(!Model.IsPartialView && !Model.IsLayoutPageSelected)
    {
        //ClearIndent();
@:</body>
@:</html>
    }
}
@functions
{
    string GetPrimaryKeyName()
    {
        return (Model.ModelMetadata.PrimaryKeys != null && Model.ModelMetadata.PrimaryKeys.Length == 1)
        ? Model.ModelMetadata.PrimaryKeys[0].PropertyName
        : null;
    }

    string GetValueExpression(IPropertyMetadata property)
    {
        return property.PropertyName;
    }

    string GetValueExpression(INavigationMetadata navigation)
    {
        return navigation.AssociationPropertyName;
    }

    string GetEnumerableTypeExpression(string typeName)
    {
        return "IEnumerable<" + typeName + ">";
    }
}