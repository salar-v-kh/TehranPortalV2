@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore
@using System.Collections.Generic
@using System.Linq
@@model @Model.ViewDataTypeName

@{
    if (Model.IsPartialView)
    {
    }
    else if (Model.IsLayoutPageSelected)
    {
@:@@{
    @:ViewBag.Title = "ویرایـــش فیلد";
    @:ViewBag.TitlePage = "ویرایـــش فیلد";
        if (!string.IsNullOrEmpty(Model.LayoutPageFile))
        {
    @:Layout = "@Model.LayoutPageFile";
        }
@:}
@:
    }
    else
    {
@:@@{
    @:Layout = null;
@:}
@:
@:<!DOCTYPE html>
@:
@:<html>
@:<head>
    @:<meta name="viewport" content="width=device-width" />
    @:<title>@Model.ViewName</title>
@:</head>
@:<body>
@:
        //    PushIndent("    ");
    }
@:<form asp-action="@Model.ViewName" class="row tehranit-box">
@:    <!--right post-->
@:    <div class="col-12 col-xl-9">
@:        <!--itemBox-->
@:        <div class="content-box">
@:            <div class="title-box mb-3">
@:                <span>ویرایـــش فیلد</span>
@:                <i class="bi bi-pencil-fill"></i>
@:            </div>
@:            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        foreach (PropertyMetadata property in Model.ModelMetadata.Properties)
        {
            if (property.IsPrimaryKey)
            {
            @:<input type="hidden" asp-for="@property.PropertyName" />
                continue;
            }

            if (property.Scaffold)
            {
                if (property.IsReadOnly)
                {
                    continue;
                }

                if (property.IsForeignKey)
                {
            @:<div class="col-12 mb-3">
                @:<label asp-for="@property.PropertyName" class="form-label"></label>
                @:<select asp-for="@property.PropertyName" class="form-select" asp-items="ViewBag.@property.PropertyName"></select>
                @:<span asp-validation-for="@property.PropertyName" class="text-danger"></span>
            @:</div>
                    continue;
                }

                bool isCheckbox = property.TypeName.Equals("System.Boolean");
                if (isCheckbox)
                {
            @:<div class="col-12 col-md-4 mb-3">
            @:<label class="form-check-label">@@Html.DisplayNameFor(model => model.@GetValueExpression(property))</label>
             @:<div class="form-check">
                @:<div>
                @:  <input class="form-check-input" asp-for="@property.PropertyName" /> 
                @:  <label class="form-check-label"> عنوان را وارد کنید</label>
                @:</div>
             @:</div>
            @:</div>
                }
                else if (property.IsEnum && !property.IsEnumFlags)
                {
            @:<div class="col-12 mb-3">
                @:<label asp-for="@property.PropertyName" class="control-label"></label>
                @:<select asp-for="@property.PropertyName" class="form-select"></select>
                @:<span asp-validation-for="@property.PropertyName" class="text-danger"></span>
            @:</div>
                }
                else if (property.IsMultilineText)
                {
            @:<div class="col-12 mb-3">
                @:<label asp-for="@property.PropertyName" class="control-label"></label>
                @:<textarea asp-for="@property.PropertyName" class="form-control"></textarea>
                @:<span asp-validation-for="@property.PropertyName" class="text-danger"></span>
            @:</div>
                }
                else
                {
            @:<div class="col-12 mb-3">
                @:<label asp-for="@property.PropertyName" class="control-label"></label>
                @:<input asp-for="@property.PropertyName" class="form-control" />
                @:<span asp-validation-for="@property.PropertyName" class="text-danger"></span>
            @:</div>
                }
            }
            // Ideally we shouldn't be here  but if the user marks the foreign key as [ScaffoldColumn(false)], we want to atleast try to make it work.
            else if (property.IsForeignKey)
            {
        @:<input type="hidden" asp-for="@property.PropertyName" />
                continue;
            }
        }
    }
           </div>
       </div>
    <!--left post-->
    <div class="col-12 col-xl-3">
        <div class="row">
            <!--itemBox-->
            <div class="col-xl-12 col-lg-4 col-md-6 col-sm-6 col-12">
                <div class="content-box">
                    <div class="title-box">
                        <span>اقـــدامات</span>
                        <i class="bi bi-gear-fill"></i>
                    </div>
                    <div class="publishBtn-box">
                      <div>
                        <input type="submit" value="ویرایـــش " class="bt btn-publish" />
                        <a asp-action="Index" class="bt btn-update">بازگشت به لیست</a>
                       </div>
                      </div>
                </div>
            </div>
            <!--itemBox-->
            <div class="col-xl-12 col-lg-4 col-md-6 col-sm-6 col-12">
                <div class="content-box">
                    <div class="title-box">
                        <span>عنوان تایتل</span>
                        <i class="bi bi-bullseye"></i>
                    </div>
                    <p>باکس 4</p>
                </div>
            </div>
        </div>
    </div>
</form>
        
@@section Styles{}

@{
    if (Model.ReferenceScriptLibraries)
    {
@:@@section Scripts {
    @:@@{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
@:}
    }
    // The following code closes the tag used in the case of a view using a layout page and the body and html tags in the case of a regular view page
    if (!Model.IsPartialView && !Model.IsLayoutPageSelected)
    {
@:</body>
@:</html>
    }
}
@functions
{
    string GetAssociationName(IPropertyMetadata property)
    {
        //Todo: Implement properly.
        return property.PropertyName;
    }

    string GetValueExpression(IPropertyMetadata property)
    {
        return property.PropertyName;
    }
}
